#!/usr/bin/env node

/** Make the list of example API calls
 * Move to scripts folder eventually
 * 
 * 
 */


let syncRequest = require('../../common/node_modules/sync-request/lib');
let serverRoot = "http://hapi.fhir.org/baseR4/"
let validate = true;

let fs = require('fs');
let igRoot = "/Users/wendy/IG/medtech/";
let sourceFile = igRoot + "artifacts/sampleQueries.json"

let outFile = igRoot + "input/pagecontent/exampleQueries.xml";  // for IG publisher

/* keep

//load the capabilitystatement & create has of allowed search parameters
let capStmtFile = igRoot + "fsh-generated/resources/CapabilityStatement-medTechCapabilityStatement.json"
let capStmt = JSON.parse(fs.readFileSync(capStmtFile).toString());

//console.log(capStmt)
let rest = capStmt.rest[0]
rest.resource.forEach(function(res){

})

*/
//console.log(capStmt)

let ar = []
ar.push("<div xmlns='http://www.w3.org/1999/xhtml'>")

ar.push("<!-- Generated by the makeExamples script -->")

let contents = fs.readFileSync(sourceFile).toString();


//console.log(contents)

let ex = JSON.parse(contents)
//console.log(ex)

ar.push("General notes")
ar.push('<ul>')
ex.notes.forEach(function(note){
    ar.push("<li>"+note+"</li>")

})
ar.push('</ul>')

ex.queries.forEach(function(examples){
    //console.log('--',examples)
    let type = examples.type
    let heading = examples.title || type

    ar.push('<a name="resource'+heading+'"> </a>')   
    ar.push("<h3>"+heading+"</h3>")


    ar.push("<br/>")
    ar.push(`<div><a href="capabilityStatement.html#${examples.type}">API definition in the IG</a></div>`)
    ar.push("<br/>")

    if (examples.notes) {
        ar.push("<br/>")
        ar.push(examples.notes)
        ar.push("<br/>")
        ar.push("<br/>")

    }


//console.log(type,examples)

    examples.examples.forEach(function(query) {
        //console.log(query)
        if (query.qry) {

            //check that all parameters in the query are in the cap stmt
            //let qry = query.qry

            //console.log(type,query.qry)

            //checkQuery(type,query.qry)

            let statusCode = 0;
            if (validate) {
                var options = {};
                options.headers = {"content-type": "application/json+fhir","Accept":"application/json+fhir"}
                options.timeout = 20000;        //20 seconds
                

                let url = serverRoot + type + query.qry
            
                var response = syncRequest('GET', url, options);
                console.log(response.statusCode, url)
                statusCode = response.statusCode
            }



            let q = '[host]/' + type + cleanText(query.qry)
            ar.push("<div><strong>"+ q +"</strong></div>")
    
            ar.push("<div><em>"+cleanText(query.doc)+"</em></div>")

            if (statusCode > 0) {

                ar.push("Validation result:"+statusCode)
                if (query.validation) {
                    ar.push(" (<em>" + cleanText(query.validation) + "</em>)")
                }
                ar.push("<br/>")
            }
    
          
            ar.push("<br/>")
        }
        
       

    })
})

ar.push ("</div>")
let file = ar.join('\r\n')
fs.writeFileSync(outFile,file);

function cleanText(txt) {
    if (txt) {
        return txt.split('&').join('&amp;')
    }
}

function checkQuery(type,qry) {
    //console.log(qry)
    let result = []


    if (qry.substr(0,1) == '/') {
        if (qry.substr(1,1) !== '$') {
            //this is a direct lookup
            return;
        } else {
            //this will be an operation
        }
        
    }
    if (qry.substr(0,4) == '?_id') {
        //this is a query by _id
        return
    }

    qry = qry.substr(1);        //strin off the preseeding ?
    let arParams = qry.split('&');
    console.log(arParams.length)
    arParams.forEach(function(param){
        console.log(param)
    })





}
